"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CookieAttribute;
(function (CookieAttribute) {
    CookieAttribute["Name"] = "name";
    CookieAttribute["Value"] = "value";
    CookieAttribute["Size"] = "size";
    CookieAttribute["Domain"] = "domain";
    CookieAttribute["Port"] = "port";
    CookieAttribute["Path"] = "path";
    CookieAttribute["Expires"] = "expires";
    CookieAttribute["HttpOnly"] = "httponly";
    CookieAttribute["Secure"] = "secure";
    CookieAttribute["SameSite"] = "samesite";
    CookieAttribute["MaxAge"] = "max-age";
})(CookieAttribute || (CookieAttribute = {}));
class NetworkCookie {
    constructor(name, value) {
        this._attributes = new Map();
        this._size = 0;
        this._name = name;
        this._value = value;
    }
    get size() {
        return this._size;
    }
    set size(size) {
        this._size = size;
    }
    get name() {
        return this._name;
    }
    get value() {
        return this._value;
    }
    get httpOnly() {
        return this._attributes.has(CookieAttribute.HttpOnly);
    }
    get secure() {
        return this._attributes.has(CookieAttribute.Secure);
    }
    get sameSite() {
        return this._attributes.get(CookieAttribute.SameSite);
    }
    get session() {
        return !(this._attributes.has(CookieAttribute.Expires) ||
            this._attributes.has(CookieAttribute.MaxAge));
    }
    get path() {
        return this._attributes.get(CookieAttribute.Path);
    }
    get port() {
        return this._attributes.get(CookieAttribute.Port);
    }
    get domain() {
        return this._attributes.get(CookieAttribute.Domain);
    }
    get expires() {
        return this._attributes.get(CookieAttribute.Expires);
    }
    get maxAge() {
        const maxAge = this._attributes.get(CookieAttribute.MaxAge);
        return isNaN(+maxAge) ? undefined : +maxAge;
    }
    get url() {
        return (this.secure ? 'https://' : 'http://') + this.domain + this.path;
    }
    expiresDate(requestDate) {
        if (this.maxAge) {
            const targetDate = requestDate === null ? new Date() : requestDate;
            return new Date(targetDate.getTime() + 1000 * this.maxAge);
        }
        if (this.expires) {
            return new Date(this.expires);
        }
        return;
    }
    addAttribute(key, value) {
        this._attributes[key.toLowerCase()] = value;
    }
}
exports.NetworkCookie = NetworkCookie;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmV0d29ya0Nvb2tpZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uZXR3b3JrL05ldHdvcmtDb29raWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFLLGVBWUo7QUFaRCxXQUFLLGVBQWU7SUFDbEIsZ0NBQWEsQ0FBQTtJQUNiLGtDQUFlLENBQUE7SUFDZixnQ0FBYSxDQUFBO0lBQ2Isb0NBQWlCLENBQUE7SUFDakIsZ0NBQWEsQ0FBQTtJQUNiLGdDQUFhLENBQUE7SUFDYixzQ0FBbUIsQ0FBQTtJQUNuQix3Q0FBcUIsQ0FBQTtJQUNyQixvQ0FBaUIsQ0FBQTtJQUNqQix3Q0FBcUIsQ0FBQTtJQUNyQixxQ0FBa0IsQ0FBQTtBQUNwQixDQUFDLEVBWkksZUFBZSxLQUFmLGVBQWUsUUFZbkI7QUFFRCxNQUFhLGFBQWE7SUF5RXhCLFlBQVksSUFBWSxFQUFFLEtBQWE7UUF0RS9CLGdCQUFXLEdBQWlDLElBQUksR0FBRyxFQUd4RCxDQUFDO1FBRUksVUFBSyxHQUFXLENBQUMsQ0FBQztRQWtFeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQWxFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksSUFBSSxDQUFDLElBQVk7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBUSxDQUFDO0lBQy9ELENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLENBQUMsQ0FDTixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDO1lBQzdDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FDN0MsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsTUFBTSxNQUFNLEdBQXVCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUNyRCxlQUFlLENBQUMsTUFBTSxDQUN2QixDQUFDO1FBRUYsT0FBTyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBSSxHQUFHO1FBQ0wsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzFFLENBQUM7SUFPTSxXQUFXLENBQUMsV0FBaUI7UUFDbEMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsTUFBTSxVQUFVLEdBQUcsV0FBVyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO1lBRW5FLE9BQU8sSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDNUQ7UUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDL0I7UUFFRCxPQUFPO0lBQ1QsQ0FBQztJQUVNLFlBQVksQ0FBQyxHQUFXLEVBQUUsS0FBYTtRQUM1QyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUM5QyxDQUFDO0NBQ0Y7QUEvRkQsc0NBK0ZDIiwic291cmNlc0NvbnRlbnQiOlsiZW51bSBDb29raWVBdHRyaWJ1dGUge1xyXG4gIE5hbWUgPSAnbmFtZScsXHJcbiAgVmFsdWUgPSAndmFsdWUnLFxyXG4gIFNpemUgPSAnc2l6ZScsXHJcbiAgRG9tYWluID0gJ2RvbWFpbicsXHJcbiAgUG9ydCA9ICdwb3J0JyxcclxuICBQYXRoID0gJ3BhdGgnLFxyXG4gIEV4cGlyZXMgPSAnZXhwaXJlcycsXHJcbiAgSHR0cE9ubHkgPSAnaHR0cG9ubHknLFxyXG4gIFNlY3VyZSA9ICdzZWN1cmUnLFxyXG4gIFNhbWVTaXRlID0gJ3NhbWVzaXRlJyxcclxuICBNYXhBZ2UgPSAnbWF4LWFnZSdcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE5ldHdvcmtDb29raWUge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX25hbWU6IHN0cmluZztcclxuICBwcml2YXRlIHJlYWRvbmx5IF92YWx1ZTogc3RyaW5nO1xyXG4gIHByaXZhdGUgX2F0dHJpYnV0ZXM6IE1hcDxDb29raWVBdHRyaWJ1dGUsIHN0cmluZz4gPSBuZXcgTWFwPFxyXG4gICAgQ29va2llQXR0cmlidXRlLFxyXG4gICAgc3RyaW5nXHJcbiAgPigpO1xyXG5cclxuICBwcml2YXRlIF9zaXplOiBudW1iZXIgPSAwO1xyXG5cclxuICBnZXQgc2l6ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XHJcbiAgfVxyXG5cclxuICBzZXQgc2l6ZShzaXplOiBudW1iZXIpIHtcclxuICAgIHRoaXMuX3NpemUgPSBzaXplO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9uYW1lO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgfVxyXG5cclxuICBnZXQgaHR0cE9ubHkoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fYXR0cmlidXRlcy5oYXMoQ29va2llQXR0cmlidXRlLkh0dHBPbmx5KTtcclxuICB9XHJcblxyXG4gIGdldCBzZWN1cmUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fYXR0cmlidXRlcy5oYXMoQ29va2llQXR0cmlidXRlLlNlY3VyZSk7XHJcbiAgfVxyXG5cclxuICBnZXQgc2FtZVNpdGUoKTogJ1N0cmljdCcgfCAnTGF4JyB8ICdOb25lJyB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5fYXR0cmlidXRlcy5nZXQoQ29va2llQXR0cmlidXRlLlNhbWVTaXRlKSBhcyBhbnk7XHJcbiAgfVxyXG5cclxuICBnZXQgc2Vzc2lvbigpOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiAhKFxyXG4gICAgICB0aGlzLl9hdHRyaWJ1dGVzLmhhcyhDb29raWVBdHRyaWJ1dGUuRXhwaXJlcykgfHxcclxuICAgICAgdGhpcy5fYXR0cmlidXRlcy5oYXMoQ29va2llQXR0cmlidXRlLk1heEFnZSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBnZXQgcGF0aCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXMuZ2V0KENvb2tpZUF0dHJpYnV0ZS5QYXRoKTtcclxuICB9XHJcblxyXG4gIGdldCBwb3J0KCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5fYXR0cmlidXRlcy5nZXQoQ29va2llQXR0cmlidXRlLlBvcnQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRvbWFpbigpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXMuZ2V0KENvb2tpZUF0dHJpYnV0ZS5Eb21haW4pO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGV4cGlyZXMoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9hdHRyaWJ1dGVzLmdldChDb29raWVBdHRyaWJ1dGUuRXhwaXJlcyk7XHJcbiAgfVxyXG5cclxuICBnZXQgbWF4QWdlKCk6IG51bWJlciB7XHJcbiAgICBjb25zdCBtYXhBZ2U6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuX2F0dHJpYnV0ZXMuZ2V0KFxyXG4gICAgICBDb29raWVBdHRyaWJ1dGUuTWF4QWdlXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiBpc05hTigrbWF4QWdlKSA/IHVuZGVmaW5lZCA6ICttYXhBZ2U7XHJcbiAgfVxyXG5cclxuICBnZXQgdXJsKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gKHRoaXMuc2VjdXJlID8gJ2h0dHBzOi8vJyA6ICdodHRwOi8vJykgKyB0aGlzLmRvbWFpbiArIHRoaXMucGF0aDtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xyXG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XHJcbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGV4cGlyZXNEYXRlKHJlcXVlc3REYXRlOiBEYXRlKTogRGF0ZSB8IHVuZGVmaW5lZCB7XHJcbiAgICBpZiAodGhpcy5tYXhBZ2UpIHtcclxuICAgICAgY29uc3QgdGFyZ2V0RGF0ZSA9IHJlcXVlc3REYXRlID09PSBudWxsID8gbmV3IERhdGUoKSA6IHJlcXVlc3REYXRlO1xyXG5cclxuICAgICAgcmV0dXJuIG5ldyBEYXRlKHRhcmdldERhdGUuZ2V0VGltZSgpICsgMTAwMCAqIHRoaXMubWF4QWdlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5leHBpcmVzKSB7XHJcbiAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmV4cGlyZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRBdHRyaWJ1dGUoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHRoaXMuX2F0dHJpYnV0ZXNba2V5LnRvTG93ZXJDYXNlKCldID0gdmFsdWU7XHJcbiAgfVxyXG59XHJcbiJdfQ==