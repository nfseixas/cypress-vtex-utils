"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const NetworkRequest_1 = require("./NetworkRequest");
class NetworkObserver {
    constructor(chromeRemoteInterface, logger, options) {
        this.chromeRemoteInterface = chromeRemoteInterface;
        this.logger = logger;
        this.options = options;
        this._entries = new Map();
        const { Network: network } = this.chromeRemoteInterface;
        this.network = network;
    }
    subscribe(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.destination = (entry) => callback(entry);
            this.chromeRemoteInterface.on('event', (event) => this.handleEvent(event));
            yield this.network.enable();
            yield this.network.setCacheDisabled({ cacheDisabled: true });
            yield this.network.setBypassServiceWorker({ bypass: true });
        });
    }
    signedExchangeReceived(params) {
        const entry = this._entries.get(params.requestId);
        if (!entry) {
            return;
        }
        entry.signedExchangeInfo = params.info;
        entry.resourceType = 'SignedExchange';
        this.updateNetworkRequestWithResponse(entry, params.info.outerResponse);
    }
    requestWillBeSent({ type, loaderId, initiator, redirectResponse, documentURL, frameId, timestamp, requestId, request, wallTime }) {
        let entry = this._entries.get(requestId);
        if (entry) {
            if (!redirectResponse) {
                return;
            }
            if (!entry.signedExchangeInfo) {
                this.responseReceived({
                    requestId,
                    loaderId,
                    timestamp,
                    type: 'Other',
                    response: redirectResponse,
                    frameId
                });
            }
            entry = this._appendRedirect(requestId, timestamp, request.url);
        }
        else {
            entry = this.createRequest(requestId, frameId, loaderId, request.url, documentURL, initiator);
        }
        this.updateNetworkRequestWithRequest(entry, request);
        entry.setIssueTime(timestamp, wallTime);
        entry.resourceType = (type !== null && type !== void 0 ? type : 'Other');
        this.startRequest(entry);
    }
    dataReceived({ requestId, dataLength, encodedDataLength, timestamp }) {
        const entry = this._entries.get(requestId);
        if (!entry) {
            return;
        }
        entry.resourceSize += dataLength;
        if (encodedDataLength !== -1) {
            entry.increaseTransferSize(encodedDataLength);
        }
        entry.endTime = timestamp;
    }
    responseReceived({ requestId, response, timestamp, type }) {
        const entry = this._entries.get(requestId);
        if (!entry) {
            return;
        }
        entry.responseReceivedTime = timestamp;
        entry.resourceType = type;
        this.updateNetworkRequestWithResponse(entry, response);
    }
    resourceChangedPriority({ requestId, newPriority }) {
        const entry = this._entries.get(requestId);
        if (!entry) {
            return;
        }
        entry.priority = newPriority;
    }
    loadingFinished({ requestId, timestamp, encodedDataLength }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const entry = this._entries.get(requestId);
            if (!entry) {
                return;
            }
            this.finishRequest(entry, timestamp, encodedDataLength);
        });
    }
    loadingFailed({ requestId, errorText, canceled, type, timestamp }) {
        const entry = this._entries.get(requestId);
        if (!entry) {
            return;
        }
        entry.resourceType = type;
        this.finishRequest(entry, timestamp, -1);
        const message = errorText || (canceled && 'Canceled');
        this.logger.err(message);
    }
    webSocketCreated({ initiator, requestId, url }) {
        const entry = this.createRequest(requestId, '', '', url, '', initiator);
        this.startRequest(entry);
    }
    webSocketWillSendHandshakeRequest({ request, requestId, timestamp, wallTime }) {
        const entry = this._entries.get(requestId);
        if (!entry) {
            return;
        }
        entry.requestMethod = 'GET';
        entry.requestHeaders = this.headersMapToHeadersArray(request.headers);
        entry.setIssueTime(timestamp, wallTime);
    }
    webSocketHandshakeResponseReceived({ timestamp, response, requestId }) {
        const entry = this._entries.get(requestId);
        if (!entry) {
            return;
        }
        entry.statusCode = response.status;
        entry.statusText = response.statusText;
        entry.responseHeaders = this.headersMapToHeadersArray(response.headers);
        entry.responseHeadersText = response.headersText || '';
        if (response.requestHeaders) {
            entry.requestHeaders = this.headersMapToHeadersArray(response.requestHeaders);
        }
        if (response.requestHeadersText) {
            entry.requestHeadersText = response.requestHeadersText;
        }
        entry.responseReceivedTime = timestamp;
        entry.protocol = 'websocket';
    }
    webSocketFrameSent({ requestId, timestamp, response }) {
        const entry = this._entries.get(requestId);
        if (!entry) {
            return;
        }
        entry.addProtocolFrame(response, timestamp, true);
        entry.responseReceivedTime = timestamp;
    }
    webSocketFrameReceived({ requestId, timestamp, response }) {
        const entry = this._entries.get(requestId);
        if (!entry) {
            return;
        }
        entry.addProtocolFrame(response, timestamp, false);
        entry.responseReceivedTime = timestamp;
    }
    webSocketFrameError({ errorMessage, requestId, timestamp }) {
        const entry = this._entries.get(requestId);
        if (!entry) {
            return;
        }
        entry.addProtocolFrameError(errorMessage, timestamp);
        entry.responseReceivedTime = timestamp;
    }
    webSocketClosed({ requestId, timestamp }) {
        const entry = this._entries.get(requestId);
        if (!entry) {
            return;
        }
        this.finishRequest(entry, timestamp, -1);
    }
    requestWillBeSentExtraInfo({ requestId, headers }) {
        const entry = this._entries.get(requestId);
        if (!entry) {
            return;
        }
        entry.addExtraRequestInfo({
            requestHeaders: this.headersMapToHeadersArray(headers)
        });
    }
    responseReceivedExtraInfo({ requestId, headers, headersText }) {
        const entry = this._entries.get(requestId);
        if (!entry) {
            return;
        }
        entry.addExtraResponseInfo({
            responseHeaders: this.headersMapToHeadersArray(headers),
            responseHeadersText: headersText
        });
    }
    _appendRedirect(requestId, time, redirectURL) {
        const originalNetworkRequest = this._entries.get(requestId);
        let redirectCount = 0;
        let redirect = originalNetworkRequest.redirectSource;
        while (redirect) {
            redirectCount++;
            redirect = redirect.redirectSource;
        }
        originalNetworkRequest.markAsRedirect(redirectCount);
        this.finishRequest(originalNetworkRequest, time, -1);
        const newNetworkRequest = this.createRequest(requestId, originalNetworkRequest.frameId, originalNetworkRequest.loaderId, redirectURL, originalNetworkRequest.documentURL, originalNetworkRequest.initiator);
        newNetworkRequest.redirectSource = originalNetworkRequest;
        return newNetworkRequest;
    }
    finishRequest(networkRequest, finishTime, encodedDataLength) {
        var _a;
        networkRequest.endTime = finishTime;
        if (encodedDataLength >= 0) {
            const redirectSource = networkRequest.redirectSource;
            if ((_a = redirectSource) === null || _a === void 0 ? void 0 : _a.signedExchangeInfo) {
                networkRequest.transferSize = 0;
                redirectSource.transferSize = encodedDataLength;
            }
            else {
                networkRequest.transferSize = encodedDataLength;
            }
        }
        this._entries.delete(networkRequest.requestId);
        this.destination(networkRequest);
    }
    startRequest(networkRequest) {
        this._entries.set(networkRequest.requestId, networkRequest);
    }
    updateNetworkRequestWithRequest(chromeRequest, request) {
        var _a;
        chromeRequest.requestMethod = request.method;
        chromeRequest.requestHeaders = this.headersMapToHeadersArray(request.headers);
        chromeRequest.setRequestFormData(!!request.hasPostData, (_a = request.postData, (_a !== null && _a !== void 0 ? _a : null)));
        chromeRequest.initialPriority = request.initialPriority;
    }
    createRequest(requestId, frameId, loaderId, url, documentURL, initiator) {
        return new NetworkRequest_1.NetworkRequest(requestId, this.stripStubPathFromUrl(url), documentURL, frameId, loaderId, initiator, this.network);
    }
    stripStubPathFromUrl(url) {
        const indexOfStubPath = url.indexOf(this.options.stubPath);
        return indexOfStubPath !== -1 ? url.substring(indexOfStubPath) : url;
    }
    updateNetworkRequestWithResponse(networkRequest, response) {
        var _a, _b;
        if (response.url && networkRequest.url !== response.url) {
            networkRequest.setUrl(this.stripStubPathFromUrl(response.url));
        }
        networkRequest.mimeType = response.mimeType;
        networkRequest.statusCode = response.status;
        networkRequest.statusText = response.statusText;
        if (!networkRequest.hasExtraResponseInfo) {
            networkRequest.responseHeaders = this.headersMapToHeadersArray(response.headers);
        }
        if (response.encodedDataLength >= 0) {
            networkRequest.transferSize = response.encodedDataLength;
        }
        if (response.requestHeaders && !networkRequest.hasExtraRequestInfo) {
            networkRequest.requestHeaders = this.headersMapToHeadersArray(response.requestHeaders);
            networkRequest.requestHeadersText = (_a = response.requestHeadersText, (_a !== null && _a !== void 0 ? _a : ''));
        }
        networkRequest.connectionReused = response.connectionReused;
        networkRequest.connectionId = String(response.connectionId);
        if (response.remoteIPAddress) {
            networkRequest.setRemoteAddress(response.remoteIPAddress, response.remotePort || -1);
        }
        networkRequest.timing = response.timing;
        networkRequest.protocol = (_b = response.protocol, (_b !== null && _b !== void 0 ? _b : ''));
    }
    headersMapToHeadersArray(headersMap) {
        return Object.keys(headersMap).reduce((acc, name) => {
            const values = headersMap[name].split('\n');
            acc.push(...values.map((value) => ({ name, value })));
            return acc;
        }, []);
    }
    handleEvent({ method, params }) {
        const methodName = method.substring(method.indexOf('.') + 1);
        const handler = this[methodName];
        if (handler) {
            handler.call(this, params);
        }
    }
}
exports.NetworkObserver = NetworkObserver;
//# sourceMappingURL=data:application/json;base64,